{"version":3,"sources":["user.js"],"names":["express","require","connection","Router","nodemailer","router","auth","jwt","res","user","req","body","query","email","err","results","status","json","length","name","contactNumber","password","message","post","response","role","sign","process","env","ACCESS_TOKEN","expiresIn","token","accessToken","transporter","mailOptions","from","EMAIL","PASSWORD","html","sendMail","error","info","console","log","checkRole","patch","authenticateToken","id","affectedRows","locals","oldPassword","module","exports"],"mappings":"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","file":"user.min.js","sourcesContent":["const express=require('express');\r\nconst connection=require('../connection');\r\nconst router=express.Router();\r\n\r\nconst jwt=require('jsonwebtoken');\r\nconst nodemailer=require('nodemailer');\r\nrequire('dotenv').config();\r\nvar auth=require('../services/authentication');\r\nvar checkRole=require('../services/checkRole');\r\n\r\nrouter.post('/signup',(req,res)=>{\r\n    let user=req.body;\r\n    query=\"select email,password,role,status from user where email=?\"\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length<=0){\r\n                query=\"insert into user(name,contactNumber,email,password,status,role) values(?,?,?,?,'false','user')\";\r\n                connection.query(query,[user.name,user.contactNumber,user.email,user.password],(err,results)=>{\r\n                    if(!err){\r\n                        return res.status(200).json({message:\"Successfully Registered\"});\r\n                    }\r\n                    else{\r\n                        return res.status(500).json(err);\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                return res.status(400).json({message:\"Email Already Exist.\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n   \r\n});\r\n\r\nrouter.post('/login',(req,res)=>{\r\n    const user=req.body;\r\n    query=\"select email,password,role,status from user where email=?\";\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <=0 || results[0].password!=user.password){\r\n                return res.status(401).json({message:\"Incorrect Username and password\"});\r\n            }\r\n            else if(results[0].status==='false'){\r\n                return res.status(401).json({message:\"Wait for admin Approval\"});\r\n            }\r\n            else if(results[0].password==user.password){\r\n                const response={email:results[0].email,role:results[0].role}\r\n                const accessToken=jwt.sign(response,process.env.ACCESS_TOKEN,{expiresIn:'8h'})\r\n                res.status(200).json({token:accessToken});\r\n            }else{\r\n                return res.status(400).json({message:\"something went wrong.Please try again later\"});\r\n            }\r\n\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\nvar transporter=nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth:{\r\n        user:process.env.EMAIL,\r\n        pass:process.env.PASSWORD\r\n    }\r\n})\r\nrouter.post('/forgotpassword',(req,res)=>{\r\n    const user=req.body;\r\n    query=\"select email,password from user where email=?\";\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <=0)\r\n            {\r\n                return res.status(200).json({message:\"Password sent successfully to your email.\"});\r\n            }\r\n            else{\r\n                var mailOptions={\r\n                    from: process.env.EMAIL,\r\n                    to: results[0].email,\r\n                    subject:'Password by Cafe mangement System',\r\n                    html: '<p><b>Login details for Cafe Management System</b><br><b>Email: </b>'+results[0].email+'<br><b>Password: </b>'+results[0].password+'<br><a href=\"http://localhost:4200/\">Click  here to login</a></p>'\r\n                };\r\n                transporter.sendMail(mailOptions,function(error,info){\r\n                    if(error){\r\n                        console.log(error);\r\n                    }\r\n                    else{\r\n                        console.log('Email sent:'+info.response);\r\n                    }\r\n                });\r\n                return res.status(200).json({message:\"Password sent successfully to your email.\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n})\r\nrouter.get('/get',auth.authenticateToken,checkRole.checkRole,(req,res)=>{\r\n    var query=\"select id,name,email,contactNumber,status from user where role='user'\";\r\n    connection.query(query,(err,results)=>{\r\n        if(!err){\r\n            return res.status(200).json(results);\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n})\r\n\r\n//update the status ofthe user.create a new API\r\nrouter.patch('/update',auth.authenticateToken,checkRole.checkRole,(req,res)=>{\r\n\r\n    let user=req.body;\r\n    var query=\"update user  set status=? where id=?\";\r\n    connection.query(query,[user.status,user.id],(err,results)=>{\r\n        if(!err){\r\n            if(results.affectedRows == 0){\r\n                return res.status(404).json({message:\"User id does not exist\"});\r\n            }\r\n            return res.status(200).json({message:\"User updated successfully\"});\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\n\r\nrouter.get('/checkToken',auth.authenticateToken,(req,res)=>{\r\n    return res.status(200).json({message:\"true\"});\r\n});\r\n\r\nrouter.post('/changePassword',auth.authenticateToken,(req,res)=>{\r\n    const user=req.body;\r\n    const email=res.locals.email;\r\n    console.log(email);\r\n    var query=\"select * from user where email=? and password=?\";\r\n    connection.query(query,[email,user.oldPassword],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <= 0){\r\n                return res.status(400).json({message:\"Incorrect Old Password\"});\r\n            }\r\n            else if(results[0].password==user.oldPassword){\r\n                query=\"update user set password=? where email=?\";\r\n                connection.query(query,[user.newPassword,email],(err,results)=>{\r\n                    if(!err){\r\n                        return res.status(200).json({message:\"Password Updated Successfully\"});\r\n                    }else{\r\n                        return res.status(500).json(err);\r\n                    }\r\n                });\r\n            }else{\r\n                return res.status(400).json({message:\"Something went wrong.Please try later\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\nmodule.exports=router;"]}