{"version":3,"sources":["user.js"],"names":["express","require","connection","router","Router","jwt","nodemailer","config","auth","checkRole","post","req","res","user","body","query","email","err","results","length","name","contactNumber","password","status","json","message","response","role","accessToken","sign","process","env","ACCESS_TOKEN","expiresIn","token","transporter","createTransport","service","EMAIL","pass","PASSWORD","mailOptions","from","to","subject","html","sendMail","error","info","console","log","get","authenticateToken","patch","id","affectedRows","locals","oldPassword","newPassword","module","exports"],"mappings":"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","sourcesContent":["const express=require('express');\r\nconst connection=require('../connection');\r\nconst router=express.Router();\r\n\r\nconst jwt=require('jsonwebtoken');\r\nconst nodemailer=require('nodemailer');\r\nrequire('dotenv').config();\r\nvar auth=require('../services/authentication');\r\nvar checkRole=require('../services/checkRole');\r\n\r\nrouter.post('/signup',(req,res)=>{\r\n    let user=req.body;\r\n    query=\"select email,password,role,status from user where email=?\"\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length<=0){\r\n                query=\"insert into user(name,contactNumber,email,password,status,role) values(?,?,?,?,'false','user')\";\r\n                connection.query(query,[user.name,user.contactNumber,user.email,user.password],(err,results)=>{\r\n                    if(!err){\r\n                        return res.status(200).json({message:\"Successfully Registered\"});\r\n                    }\r\n                    else{\r\n                        return res.status(500).json(err);\r\n                    }\r\n                })\r\n            }\r\n            else{\r\n                return res.status(400).json({message:\"Email Already Exist.\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n   \r\n});\r\n\r\nrouter.post('/login',(req,res)=>{\r\n    const user=req.body;\r\n    query=\"select email,password,role,status from user where email=?\";\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <=0 || results[0].password!=user.password){\r\n                return res.status(401).json({message:\"Incorrect Username and password\"});\r\n            }\r\n            else if(results[0].status==='false'){\r\n                return res.status(401).json({message:\"Wait for admin Approval\"});\r\n            }\r\n            else if(results[0].password==user.password){\r\n                const response={email:results[0].email,role:results[0].role}\r\n                const accessToken=jwt.sign(response,process.env.ACCESS_TOKEN,{expiresIn:'8h'})\r\n                res.status(200).json({token:accessToken});\r\n            }else{\r\n                return res.status(400).json({message:\"something went wrong.Please try again later\"});\r\n            }\r\n\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\nvar transporter=nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth:{\r\n        user:process.env.EMAIL,\r\n        pass:process.env.PASSWORD\r\n    }\r\n})\r\nrouter.post('/forgotpassword',(req,res)=>{\r\n    const user=req.body;\r\n    query=\"select email,password from user where email=?\";\r\n    connection.query(query,[user.email],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <=0)\r\n            {\r\n                return res.status(200).json({message:\"Password sent successfully to your email.\"});\r\n            }\r\n            else{\r\n                var mailOptions={\r\n                    from: process.env.EMAIL,\r\n                    to: results[0].email,\r\n                    subject:'Password by Cafe mangement System',\r\n                    html: '<p><b>Login details for Cafe Management System</b><br><b>Email: </b>'+results[0].email+'<br><b>Password: </b>'+results[0].password+'<br><a href=\"http://localhost:4200/\">Click  here to login</a></p>'\r\n                };\r\n                transporter.sendMail(mailOptions,function(error,info){\r\n                    if(error){\r\n                        console.log(error);\r\n                    }\r\n                    else{\r\n                        console.log('Email sent:'+info.response);\r\n                    }\r\n                });\r\n                return res.status(200).json({message:\"Password sent successfully to your email.\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n})\r\nrouter.get('/get',auth.authenticateToken,checkRole.checkRole,(req,res)=>{\r\n    var query=\"select id,name,email,contactNumber,status from user where role='user'\";\r\n    connection.query(query,(err,results)=>{\r\n        if(!err){\r\n            return res.status(200).json(results);\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    })\r\n})\r\n\r\n//update the status ofthe user.create a new API\r\nrouter.patch('/update',auth.authenticateToken,checkRole.checkRole,(req,res)=>{\r\n\r\n    let user=req.body;\r\n    var query=\"update user  set status=? where id=?\";\r\n    connection.query(query,[user.status,user.id],(err,results)=>{\r\n        if(!err){\r\n            if(results.affectedRows == 0){\r\n                return res.status(404).json({message:\"User id does not exist\"});\r\n            }\r\n            return res.status(200).json({message:\"User updated successfully\"});\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\n\r\nrouter.get('/checkToken',auth.authenticateToken,(req,res)=>{\r\n    return res.status(200).json({message:\"true\"});\r\n});\r\n\r\nrouter.post('/changePassword',auth.authenticateToken,(req,res)=>{\r\n    const user=req.body;\r\n    const email=res.locals.email;\r\n    console.log(email);\r\n    var query=\"select * from user where email=? and password=?\";\r\n    connection.query(query,[email,user.oldPassword],(err,results)=>{\r\n        if(!err){\r\n            if(results.length <= 0){\r\n                return res.status(400).json({message:\"Incorrect Old Password\"});\r\n            }\r\n            else if(results[0].password==user.oldPassword){\r\n                query=\"update user set password=? where email=?\";\r\n                connection.query(query,[user.newPassword,email],(err,results)=>{\r\n                    if(!err){\r\n                        return res.status(200).json({message:\"Password Updated Successfully\"});\r\n                    }else{\r\n                        return res.status(500).json(err);\r\n                    }\r\n                });\r\n            }else{\r\n                return res.status(400).json({message:\"Something went wrong.Please try later\"});\r\n            }\r\n        }\r\n        else{\r\n            return res.status(500).json(err);\r\n        }\r\n    });\r\n});\r\nmodule.exports=router;"],"file":"user.dev.js"}